library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity key_Lcd is
 Port (
 clk : in STD_LOGIC;
 rst : in STD_LOGIC;
 RS : out STD_LOGIC := '0';
 EN : out STD_LOGIC := '0';
 RW : out STD_LOGIC;
 LCD : out STD_LOGIC_VECTOR (7 downto 0);
 ROW : inout STD_LOGIC_VECTOR (3 downto 0);
 COL : inout STD_LOGIC_VECTOR (3 downto 0) );
end key_Lcd;
architecture Behavioral of key_Lcd is
 SIGNAL rowtest : integer range 0 to 3 := 0;
 constant N : integer := 15;
 SIGNAL data : STD_LOGIC_VECTOR (7 downto 0);
 SIGNAL Ldata : STD_LOGIC_VECTOR (7 downto 0);
 SIGNAL rowm : STD_LOGIC_VECTOR (3 downto 0);
 signal step : integer range 0 to 6 := 0;
 signal i : integer range 0 to 16 := 0;
 signal R_S, E_N, R_W : std_logic := '0';
 SIGNAL clock : STD_LOGIC;
 type arr is array (1 to N) of std_logic_vector(7 downto 0);
 constant datas : arr := (
 x"38", x"0E", x"06", x"01", x"80",
 x"4B", x"45", x"59", x"20", x"50", x"52", x"45", x"53", x"53", x"3A" );
begin
 process(rst, clk)
 variable temp : integer range 0 to 999999;
 begin
 if rst = '0' then
 temp := 0;
 clock <= '0';
 elsif rising_edge(clk) then
 temp := temp + 1;
 if temp = 25000 then
 clock <= not clock;
 temp := 0;
 end if;
 end if;
 end process;
 process(clock, rst, step, data)
 begin
 if rst = '0' then
 R_W <= '0';
 E_N <= '0';
 R_S <= '0';
 Ldata <= x"00";
 i <= 0;
 elsif rising_edge(clock) then
 case step is
 when 0 =>
 if i < 5 then
 R_W <= '0';
 R_S <= '0';
 else
 R_S <= '1';
 end if;
 Ldata <= datas(i);
 E_N <= '1';
 step <= 1;
 when 1 =>
 i <= i + 1;
 step <= 2;
 when 2 =>
 if i = 16 then
 step <= 3;
 else
 step <= 0;
 end if;
 when 3 =>
 R_S <= '0';
 E_N <= '1';
 step <= 4;
 when 4 =>
 step <= 5;
 when 5 =>
 R_S <= '1';
 Ldata <= x"8B";
 E_N <= '0';
 Ldata <= data;
 E_N <= '0';
 E_N <= '1';
 step <= 6;
 when 6 =>
 step <= 3;
 end case;
 end if;
 end process;
 process(clock, rst)
 begin
 if rst = '0' then
 rowtest <= 0;
 rowm <= "1111";
 data <= x"FF";
 elsif rising_edge(clock) then
 case rowtest is
 when 0 =>
 rowm <= "0111";
 case COL is
 when "0111" => data <= x"43";
 when "1011" => data <= x"44";
 when "1101" => data <= x"45";
 when "1110" => data <= x"46";
 when others => rowtest <= 1;
 end case;
 when 1 =>
 rowm <= "1011";
 case COL is
 when "0111" => data <= x"30";
 when "1011" => data <= x"31";
 when "1101" => data <= x"32";
 when "1110" => data <= x"33";
 when others => rowtest <= 2;
 end case;
 when 2 =>
 rowm <= "1101";
 case COL is
 when "0111" => data <= x"34";
 when "1011" => data <= x"35";
 when "1101" => data <= x"36";
 when "1110" => data <= x"37";
 when others => rowtest <= 3;
 end case;
 when 3 =>
 rowm <= "1110";
 case COL is
 when "0111" => data <= x"38";
 when "1011" => data <= x"39";
 when "1101" => data <= x"41";
 when "1110" => data <= x"42";
 when others => rowtest <= 0;
 end case;
 end case;
 end if;
 end process;
 ROW <= rowm;
 LCD <= Ldata;
 EN <= E_N;
 RW <= R_W;
 RS <= R_S;
end Behavioral;



UCF FILE

# Clock and Reset for Basys2 Board
NET "clk" LOC = "P56"; # Bank = 0, Signal name = MCLK
NET "rst" LOC = "P22"; # Bank = 2, Signal name = Reset
NET "rst" CLOCK_DEDICATED_ROUTE = TRUE;
# LCD Data Pins
NET "LCD[0]" LOC = "P85";
NET "LCD[1]" LOC = "P82";
NET "LCD[2]" LOC = "P83";
NET "LCD[3]" LOC = "P80";
NET "LCD[4]" LOC = "P81";
NET "LCD[5]" LOC = "P78";
NET "LCD[6]" LOC = "P79";
NET "LCD[7]" LOC = "P74";
# Control Lines
NET "RS" LOC = "P88";
NET "EN" LOC = "P84";
NET "RW" LOC = "P140";
# Column Pins with Pull-up and Drive Strength
NET "COL[0]" LOC = "P58" | PULLUP | DRIVE = 2;
NET "COL[1]" LOC = "P62" | PULLUP | DRIVE = 2;
NET "COL[2]" LOC = "P61" | PULLUP | DRIVE = 2;
NET "COL[3]" LOC = "P66" | PULLUP | DRIVE = 2;
# Row Pins
NET "ROW[0]" LOC = "P64";
NET "ROW[1]" LOC = "P16";
NET "ROW[2]" LOC = "P117";
NET "ROW[3]" LOC = "P75";
